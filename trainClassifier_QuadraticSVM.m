function [trainedClassifier, validationAccuracy] = trainClassifier_QuadraticSVM(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: a table containing the same predictor and response
%       columns as imported into the app.
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 01-Dec-2017 18:24:08


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'train_data1', 'train_data2', 'train_data3', 'train_data4', 'train_data5', 'train_data6', 'train_data7', 'train_data8', 'train_data9', 'train_data10', 'train_data11', 'train_data12', 'train_data13', 'train_data14', 'train_data15', 'train_data16', 'train_data17', 'train_data18', 'train_data19', 'train_data20', 'train_data21', 'train_data22', 'train_data23', 'train_data24', 'train_data25', 'train_data26', 'train_data27', 'train_data28', 'train_data29', 'train_data30', 'train_data31', 'train_data32', 'train_data33', 'train_data34', 'train_data35', 'train_data36', 'train_data37', 'train_data38', 'train_data39', 'train_data40', 'train_data41', 'train_data42', 'train_data43', 'train_data44', 'train_data45', 'train_data46', 'train_data47', 'train_data48', 'train_data49', 'train_data50', 'train_data51', 'train_data52', 'train_data53', 'train_data54', 'train_data55', 'train_data56', 'train_data57', 'train_data58', 'train_data59', 'train_data60', 'train_data61', 'train_data62', 'train_data63', 'train_data64', 'train_data65', 'train_data66', 'train_data67', 'train_data68', 'train_data69', 'train_data70', 'train_data71', 'train_data72', 'train_data73', 'train_data74', 'train_data75', 'train_data76', 'train_data77', 'train_data78', 'train_data79', 'train_data80', 'train_data81', 'train_data82', 'train_data83', 'train_data84', 'train_data85', 'train_data86', 'train_data87', 'train_data88', 'train_data89', 'train_data90', 'train_data91', 'train_data92', 'train_data93', 'train_data94', 'train_data95', 'train_data96', 'train_data97', 'train_data98', 'train_data99', 'train_data100', 'train_data101', 'train_data102', 'train_data103', 'train_data104', 'train_data105', 'train_data106', 'train_data107', 'train_data108', 'train_data109', 'train_data110', 'train_data111', 'train_data112', 'train_data113', 'train_data114', 'train_data115', 'train_data116', 'train_data117', 'train_data118', 'train_data119', 'train_data120', 'train_data121', 'train_data122', 'train_data123', 'train_data124', 'train_data125', 'train_data126', 'train_data127', 'train_data128', 'train_data129', 'train_data130', 'train_data131', 'train_data132', 'train_data133', 'train_data134', 'train_data135', 'train_data136', 'train_data137', 'train_data138', 'train_data139', 'train_data140', 'train_data141', 'train_data142', 'train_data143', 'train_data144', 'train_data145', 'train_data146', 'train_data147', 'train_data148', 'train_data149', 'train_data150', 'train_data151', 'train_data152', 'train_data153', 'train_data154', 'train_data155', 'train_data156', 'train_data157', 'train_data158', 'train_data159', 'train_data160', 'train_data161', 'train_data162', 'train_data163', 'train_data164', 'train_data165', 'train_data166', 'train_data167', 'train_data168', 'train_data169', 'train_data170', 'train_data171', 'train_data172', 'train_data173', 'train_data174', 'train_data175', 'train_data176', 'train_data177', 'train_data178', 'train_data179', 'train_data180', 'train_data181', 'train_data182', 'train_data183', 'train_data184', 'train_data185', 'train_data186', 'train_data187', 'train_data188', 'train_data189', 'train_data190', 'train_data191', 'train_data192', 'train_data193', 'train_data194', 'train_data195', 'train_data196', 'train_data197', 'train_data198', 'train_data199', 'train_data200', 'train_data201', 'train_data202', 'train_data203', 'train_data204', 'train_data205', 'train_data206', 'train_data207', 'train_data208', 'train_data209', 'train_data210', 'train_data211', 'train_data212', 'train_data213', 'train_data214', 'train_data215', 'train_data216', 'train_data217', 'train_data218', 'train_data219', 'train_data220', 'train_data221', 'train_data222', 'train_data223', 'train_data224', 'train_data225', 'train_data226', 'train_data227', 'train_data228', 'train_data229', 'train_data230', 'train_data231', 'train_data232', 'train_data233', 'train_data234', 'train_data235', 'train_data236', 'train_data237', 'train_data238', 'train_data239', 'train_data240', 'train_data241', 'train_data242', 'train_data243', 'train_data244', 'train_data245', 'train_data246', 'train_data247', 'train_data248', 'train_data249', 'train_data250'};
predictors = inputTable(:, predictorNames);
response = inputTable.classType;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
template = templateSVM(...
    'KernelFunction', 'polynomial', ...
    'PolynomialOrder', 2, ...
    'KernelScale', 'auto', ...
    'BoxConstraint', 1, ...
    'Standardize', true);
classificationSVM = fitcecoc(...
    predictors, ...
    response, ...
    'Learners', template, ...
    'Coding', 'onevsone', ...
    'ClassNames', categorical({'BACKGROUND_Google'; 'Faces'; 'Faces_easy'; 'Leopards'; 'Motorbikes'; 'accordion'; 'airplanes'; 'anchor'; 'ant'; 'barrel'; 'bass'; 'beaver'; 'binocular'; 'bonsai'; 'brain'; 'brontosaurus'; 'buddha'; 'butterfly'; 'camera'; 'cannon'; 'car_side'; 'ceiling_fan'; 'cellphone'; 'chair'; 'chandelier'; 'cougar_body'; 'cougar_face'; 'crab'; 'crayfish'; 'crocodile'; 'crocodile_head'; 'cup'; 'dalmatian'; 'dollar_bill'; 'dolphin'; 'dragonfly'; 'electric_guitar'; 'elephant'; 'emu'; 'euphonium'; 'ewer'; 'ferry'; 'flamingo'; 'flamingo_head'; 'garfield'; 'gerenuk'; 'gramophone'; 'grand_piano'; 'hawksbill'; 'headphone'; 'hedgehog'; 'helicopter'; 'ibis'; 'inline_skate'; 'joshua_tree'; 'kangaroo'; 'ketch'; 'lamp'; 'laptop'; 'llama'; 'lobster'; 'lotus'; 'mandolin'; 'mayfly'; 'menorah'; 'metronome'; 'minaret'; 'nautilus'; 'octopus'; 'okapi'; 'pagoda'; 'panda'; 'pigeon'; 'pizza'; 'platypus'; 'pyramid'; 'revolver'; 'rhino'; 'rooster'; 'saxophone'; 'schooner'; 'scissors'; 'scorpion'; 'sea_horse'; 'snoopy'; 'soccer_ball'; 'stapler'; 'starfish'; 'stegosaurus'; 'stop_sign'; 'strawberry'; 'sunflower'; 'tick'; 'trilobite'; 'umbrella'; 'watch'; 'water_lilly'; 'wheelchair'; 'wild_cat'; 'windsor_chair'; 'wrench'; 'yin_yang'}));

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
svmPredictFcn = @(x) predict(classificationSVM, x);
trainedClassifier.predictFcn = @(x) svmPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'train_data1', 'train_data2', 'train_data3', 'train_data4', 'train_data5', 'train_data6', 'train_data7', 'train_data8', 'train_data9', 'train_data10', 'train_data11', 'train_data12', 'train_data13', 'train_data14', 'train_data15', 'train_data16', 'train_data17', 'train_data18', 'train_data19', 'train_data20', 'train_data21', 'train_data22', 'train_data23', 'train_data24', 'train_data25', 'train_data26', 'train_data27', 'train_data28', 'train_data29', 'train_data30', 'train_data31', 'train_data32', 'train_data33', 'train_data34', 'train_data35', 'train_data36', 'train_data37', 'train_data38', 'train_data39', 'train_data40', 'train_data41', 'train_data42', 'train_data43', 'train_data44', 'train_data45', 'train_data46', 'train_data47', 'train_data48', 'train_data49', 'train_data50', 'train_data51', 'train_data52', 'train_data53', 'train_data54', 'train_data55', 'train_data56', 'train_data57', 'train_data58', 'train_data59', 'train_data60', 'train_data61', 'train_data62', 'train_data63', 'train_data64', 'train_data65', 'train_data66', 'train_data67', 'train_data68', 'train_data69', 'train_data70', 'train_data71', 'train_data72', 'train_data73', 'train_data74', 'train_data75', 'train_data76', 'train_data77', 'train_data78', 'train_data79', 'train_data80', 'train_data81', 'train_data82', 'train_data83', 'train_data84', 'train_data85', 'train_data86', 'train_data87', 'train_data88', 'train_data89', 'train_data90', 'train_data91', 'train_data92', 'train_data93', 'train_data94', 'train_data95', 'train_data96', 'train_data97', 'train_data98', 'train_data99', 'train_data100', 'train_data101', 'train_data102', 'train_data103', 'train_data104', 'train_data105', 'train_data106', 'train_data107', 'train_data108', 'train_data109', 'train_data110', 'train_data111', 'train_data112', 'train_data113', 'train_data114', 'train_data115', 'train_data116', 'train_data117', 'train_data118', 'train_data119', 'train_data120', 'train_data121', 'train_data122', 'train_data123', 'train_data124', 'train_data125', 'train_data126', 'train_data127', 'train_data128', 'train_data129', 'train_data130', 'train_data131', 'train_data132', 'train_data133', 'train_data134', 'train_data135', 'train_data136', 'train_data137', 'train_data138', 'train_data139', 'train_data140', 'train_data141', 'train_data142', 'train_data143', 'train_data144', 'train_data145', 'train_data146', 'train_data147', 'train_data148', 'train_data149', 'train_data150', 'train_data151', 'train_data152', 'train_data153', 'train_data154', 'train_data155', 'train_data156', 'train_data157', 'train_data158', 'train_data159', 'train_data160', 'train_data161', 'train_data162', 'train_data163', 'train_data164', 'train_data165', 'train_data166', 'train_data167', 'train_data168', 'train_data169', 'train_data170', 'train_data171', 'train_data172', 'train_data173', 'train_data174', 'train_data175', 'train_data176', 'train_data177', 'train_data178', 'train_data179', 'train_data180', 'train_data181', 'train_data182', 'train_data183', 'train_data184', 'train_data185', 'train_data186', 'train_data187', 'train_data188', 'train_data189', 'train_data190', 'train_data191', 'train_data192', 'train_data193', 'train_data194', 'train_data195', 'train_data196', 'train_data197', 'train_data198', 'train_data199', 'train_data200', 'train_data201', 'train_data202', 'train_data203', 'train_data204', 'train_data205', 'train_data206', 'train_data207', 'train_data208', 'train_data209', 'train_data210', 'train_data211', 'train_data212', 'train_data213', 'train_data214', 'train_data215', 'train_data216', 'train_data217', 'train_data218', 'train_data219', 'train_data220', 'train_data221', 'train_data222', 'train_data223', 'train_data224', 'train_data225', 'train_data226', 'train_data227', 'train_data228', 'train_data229', 'train_data230', 'train_data231', 'train_data232', 'train_data233', 'train_data234', 'train_data235', 'train_data236', 'train_data237', 'train_data238', 'train_data239', 'train_data240', 'train_data241', 'train_data242', 'train_data243', 'train_data244', 'train_data245', 'train_data246', 'train_data247', 'train_data248', 'train_data249', 'train_data250'};
trainedClassifier.ClassificationSVM = classificationSVM;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2017a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'train_data1', 'train_data2', 'train_data3', 'train_data4', 'train_data5', 'train_data6', 'train_data7', 'train_data8', 'train_data9', 'train_data10', 'train_data11', 'train_data12', 'train_data13', 'train_data14', 'train_data15', 'train_data16', 'train_data17', 'train_data18', 'train_data19', 'train_data20', 'train_data21', 'train_data22', 'train_data23', 'train_data24', 'train_data25', 'train_data26', 'train_data27', 'train_data28', 'train_data29', 'train_data30', 'train_data31', 'train_data32', 'train_data33', 'train_data34', 'train_data35', 'train_data36', 'train_data37', 'train_data38', 'train_data39', 'train_data40', 'train_data41', 'train_data42', 'train_data43', 'train_data44', 'train_data45', 'train_data46', 'train_data47', 'train_data48', 'train_data49', 'train_data50', 'train_data51', 'train_data52', 'train_data53', 'train_data54', 'train_data55', 'train_data56', 'train_data57', 'train_data58', 'train_data59', 'train_data60', 'train_data61', 'train_data62', 'train_data63', 'train_data64', 'train_data65', 'train_data66', 'train_data67', 'train_data68', 'train_data69', 'train_data70', 'train_data71', 'train_data72', 'train_data73', 'train_data74', 'train_data75', 'train_data76', 'train_data77', 'train_data78', 'train_data79', 'train_data80', 'train_data81', 'train_data82', 'train_data83', 'train_data84', 'train_data85', 'train_data86', 'train_data87', 'train_data88', 'train_data89', 'train_data90', 'train_data91', 'train_data92', 'train_data93', 'train_data94', 'train_data95', 'train_data96', 'train_data97', 'train_data98', 'train_data99', 'train_data100', 'train_data101', 'train_data102', 'train_data103', 'train_data104', 'train_data105', 'train_data106', 'train_data107', 'train_data108', 'train_data109', 'train_data110', 'train_data111', 'train_data112', 'train_data113', 'train_data114', 'train_data115', 'train_data116', 'train_data117', 'train_data118', 'train_data119', 'train_data120', 'train_data121', 'train_data122', 'train_data123', 'train_data124', 'train_data125', 'train_data126', 'train_data127', 'train_data128', 'train_data129', 'train_data130', 'train_data131', 'train_data132', 'train_data133', 'train_data134', 'train_data135', 'train_data136', 'train_data137', 'train_data138', 'train_data139', 'train_data140', 'train_data141', 'train_data142', 'train_data143', 'train_data144', 'train_data145', 'train_data146', 'train_data147', 'train_data148', 'train_data149', 'train_data150', 'train_data151', 'train_data152', 'train_data153', 'train_data154', 'train_data155', 'train_data156', 'train_data157', 'train_data158', 'train_data159', 'train_data160', 'train_data161', 'train_data162', 'train_data163', 'train_data164', 'train_data165', 'train_data166', 'train_data167', 'train_data168', 'train_data169', 'train_data170', 'train_data171', 'train_data172', 'train_data173', 'train_data174', 'train_data175', 'train_data176', 'train_data177', 'train_data178', 'train_data179', 'train_data180', 'train_data181', 'train_data182', 'train_data183', 'train_data184', 'train_data185', 'train_data186', 'train_data187', 'train_data188', 'train_data189', 'train_data190', 'train_data191', 'train_data192', 'train_data193', 'train_data194', 'train_data195', 'train_data196', 'train_data197', 'train_data198', 'train_data199', 'train_data200', 'train_data201', 'train_data202', 'train_data203', 'train_data204', 'train_data205', 'train_data206', 'train_data207', 'train_data208', 'train_data209', 'train_data210', 'train_data211', 'train_data212', 'train_data213', 'train_data214', 'train_data215', 'train_data216', 'train_data217', 'train_data218', 'train_data219', 'train_data220', 'train_data221', 'train_data222', 'train_data223', 'train_data224', 'train_data225', 'train_data226', 'train_data227', 'train_data228', 'train_data229', 'train_data230', 'train_data231', 'train_data232', 'train_data233', 'train_data234', 'train_data235', 'train_data236', 'train_data237', 'train_data238', 'train_data239', 'train_data240', 'train_data241', 'train_data242', 'train_data243', 'train_data244', 'train_data245', 'train_data246', 'train_data247', 'train_data248', 'train_data249', 'train_data250'};
predictors = inputTable(:, predictorNames);
response = inputTable.classType;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationSVM, 'KFold', 5);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
